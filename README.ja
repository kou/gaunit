# -*- rd -*-

= README.ja

== 作者

Kouhei Sutou <kou@cozmixng.org>

== ライセンス

GPL or BSD License

== メーリングリスト

((<COZMIXNG RWiki - 連絡先|URL:http://www.cozmixng.org/~rwiki/index.rb?cmd=view;name=%CF%A2%CD%ED%C0%E8>))を御覧下さい．

== なにこれ？

GaUnitはGaucheで実装されたUnit Testing Frameworkです．テスト
の実行を支援するEmacs-Lispが付いています．

同様のものに
((<SchemeUnit|URL:http://schematics.sourceforge.net/schemeunit.html>))
があります．

== 読めねぇよ

「ごにっと」とかはどうでしょう？

== 入手方法

((<URL:http://www.cozmixng.org/~kou/download/gaunit.tar.gz>))

  % svn co http://www.cozmixng.org/repos/gauche/gaunit/trunk gaunit

== インストール

  # gosh install.scm

== 使い方

test.unitは一般的過ぎるので変更されるかもしれません．

  (use test.unit)

  (define-test-suite ...)
  とか
  (define-test-case ...)
  とか

  (run-all-test)

=== run-test.el

sample/site-lisp/run-test.elはEmacs上でのテストの実行を支援
するEmacs-Lispです．

使うには，まず，.emacsに以下を記述します．

  (setq load-path (cons run-test.elがあるディレクトリ load-path))
  (load "run-test")

テストを実行するスクリプトrun-test.shを書きます．例えば，こ
んな感じです．

  #!/bin/sh

  for test in test/test-*.scm
  do
    echo "Running test $test..."
    gosh $test
  done

あるいは，run-test.scmとしてこんな感じでもいいです．

  #!/usr/bin/env gosh

  (use file.util)
  (use test.unit)

  (define (main args)
    (let ((dir (sys-dirname (car args))))
      (for-each (lambda (test-script)
                  (reset-test-suites)
                  (print "loading " (string-join
                                     (list dir test-script)
                                     "/"))
                  (eval `(load ,(string-join
                                 (list dir test-script)
                                 "/"))
                        (current-module))
                  (newline))
                (directory-list dir
                                :filter (lambda (x) (rxmatch #/^test-/ x)))
                )))


で，testというディレクトリを作って，このrun-test.shあるいは
run-test.scmに実行権を付けておいておきます．

テストファイルはtestというディレクトリ以下にtest-hoge.scmと
いう名前で作っていきます．つまり，ディレクトリ構成は以下の様
になります．

  topdir --- test --- run-test.sh or run-test.scm
                   |
                   +- test-hoge.scm
                   |
                   .
                   .
                   .
                   |
                   +- test-fuga.scm

テスト(run-test.scm)はtopdirで起動されます．つまり，

  % test/run-test.sh

というように起動されます．

run-test.{sh,scm}を書くときはこのことに注意しましょう．

設定はこれで終了です．

topdirから3階層まで深いディレクトリ内ではC-cC-t(run-test)で
topdir/test/run-test.shが実行できます．実行結果は
*Compilation*バッファに挿入されます．テストを実行して失敗/エ
ラーがおきたらエラーが発生したassertionにC-x`でジャンプする
ことができます．

これで手軽に頻繁にテストを実行できますね．Happy testing!!

==== カスタマイズ変数

: run-test-file
   テストを実行するスクリプトの拡張子を除いたファイル名です．
   
   デフォルト: "test/run-test"

: run-test-suffixes
   run-test-fileに付加する拡張子のリストです．先頭の方にある拡張子程
   優先されます．
   
   デフォルト: (".scm" ".rb" ".sh")

: run-test-search-directories
   run-test-fileを探索するディレクトリのリストです．先頭の方
   にあるでぃれくとり程優先されます．
   
   デフォルト: ("./" "../" "../../" "../../../")
