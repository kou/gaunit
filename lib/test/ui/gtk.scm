(define-module test.ui.gtk
  (extend test.ui)
  (use test.unit)
  (use gauche.threads)
  (use gtk)
  (use gauche.vm.debugger)
  (use gauche.time)
  (use srfi-2)
  (export <test-ui-gtk>))
(select-module test.ui.gtk)
(gtk-init (with-module user *argv*))

(define-class <test-ui-gtk> ()
  ((main-window :accessor main-window-of)
   (suite-name-entry :accessor suite-name-entry-of)
   (run-button :accessor run-button-of)
   (progress-bar :accessor progress-bar-of)
   (run-count-label :accessor run-count-label-of)
   (assertion-count-label :accessor assertion-count-label-of)
   (success-count-label :accessor success-count-label-of)
   (failure-count-label :accessor failure-count-label-of)
   (error-count-label :accessor error-count-label-of)
   (list-window :accessor list-window-of)
   (fault-list :accessor fault-list-of)
   (detail-window :accessor detail-window-of)
   (fault-detail-label :accessor fault-detail-label-of)
   (status-entry :accessor status-entry-of))
  )

(define-method display-when ((self <test-ui-gtk>) level message . options)
  (let-optionals* options ((print-proc display))
                  (print-proc message)))

(define-method initialize ((self <test-ui-gtk>) . args)
  (next-method)
  (slot-set! self 'main-window (make-main-window self)))

(define (make-main-window ui)
  (let ((window (gtk-window-new GTK_WINDOW_TOPLEVEL)))
    (g-signal-connect window "destroy" (lambda _ (gtk-main-quit)))
    (gtk-container-add window (make-main-panel ui))
    window))

(define (make-main-panel ui)
  (let ((panel (gtk-vbox-new #f 0)))
    (gtk-box-pack-start panel (make-suite-panel ui) #f #f 0)
    (gtk-box-pack-start panel (make-progress-panel ui) #f #f 0)
    (gtk-box-pack-start panel (make-info-panel ui) #f #f 0)
    (gtk-box-pack-start panel (make-list-panel ui) #f #f 0)
    (gtk-box-pack-start panel (make-detail-panel ui) #t #t 0)
    (gtk-box-pack-start panel (make-status-panel ui) #f #f 0)
    panel))

(define (make-suite-panel ui)
  (let ((panel (gtk-hbox-new #f 10)))
    (gtk-container-set-border-width panel 10)
    (gtk-box-pack-start panel (gtk-label-new "Suite:") #f #f 0)
    (gtk-box-pack-start panel (make-suite-name-entry ui) #t #t 0)
    (gtk-box-pack-start panel (make-run-button ui) #f #f 0)
    panel))

(define (make-suite-name-entry ui)
  (let ((entry (gtk-entry-new)))
    (gtk-entry-set-editable entry #f)
    (slot-set! ui 'suite-name-entry entry)
    entry))

(define (make-run-button ui)
  (let ((button (gtk-button-new-with-label "Run")))
    (slot-set! ui 'run-button button)
    button))

(define (make-progress-panel ui)
  (let ((panel (gtk-hbox-new #f 10)))
    (gtk-container-set-border-width panel 10)
    (gtk-box-pack-start panel (make-test-progress-bar ui) #t #t 0)
    panel))

(define (make-test-progress-bar ui)
  (let ((bar (gtk-progress-bar-new)))
    (slot-set! ui 'progress-bar bar)
    (gtk-widget-set-style bar (make-green-style ui))
    bar))

(define (make-green-style ui)
  (let ((style (gtk-style-new)))
;    (gtk-style-set-background style (main-window-of ui) GTK_STATE_PRELIGHT)
    style))

(define (make-red-style ui)
  (let ((style (gtk-style-new)))
;    (gtk-style-set-background style (main-window-of ui) GTK_STATE_PRELIGHT)
    style))

(define (make-info-panel ui)
  (let ((panel (gtk-hbox-new #f 0)))
    (gtk-container-set-border-width panel 10)
    (gtk-box-pack-start panel (gtk-label-new "Runs:") #f #f 0)
    (gtk-box-pack-start panel (make-count-label ui "run") #t #f 0)
    (gtk-box-pack-start panel (gtk-label-new "Assertions:") #f #f 0)
    (gtk-box-pack-start panel (make-count-label ui "assertion") #t #f 0)
    (gtk-box-pack-start panel (gtk-label-new "Successes:") #f #f 0)
    (gtk-box-pack-start panel (make-count-label ui "success") #t #f 0)
    (gtk-box-pack-start panel (gtk-label-new "Failures:") #f #f 0)
    (gtk-box-pack-start panel (make-count-label ui "failure") #t #f 0)
    (gtk-box-pack-start panel (gtk-label-new "Errors:") #f #f 0)
    (gtk-box-pack-start panel (make-count-label ui "error") #t #f 0)
    panel))

(define (make-count-label ui type)
  (let ((label (gtk-label-new "0")))
    (slot-set! ui (string->symbol #`",|type|-count-label") label)
    (gtk-label-set-justify label GTK_JUSTIFY_LEFT)
    label))

(define (make-list-panel ui)
  (let ((panel (gtk-hbox-new #f 0)))
    (gtk-box-pack-start panel (make-list-scrolled-window ui) #t #t 0)
    panel))

(define (make-list-scrolled-window ui)
  (let ((window (gtk-scrolled-window-new #f #f)))
    (slot-set! ui 'list-window window)
    (gtk-scrolled-window-set-policy window
                                    GTK_POLICY_AUTOMATIC
                                    GTK_POLICY_AUTOMATIC)
    (gtk-scrolled-window-add-with-viewport window (make-fault-list ui))
    window))

(define (make-fault-list ui)
  (let ((list (gtk-list-new)))
    (slot-set! ui 'fault-list list)
    list))

(define (make-detail-panel ui)
  (let ((panel (gtk-hbox-new #f 0)))
    (gtk-box-pack-start panel (make-detail-scrolled-window ui) #t #t 0)
    panel))

(define (make-detail-scrolled-window ui)
  (let ((window (gtk-scrolled-window-new #f #f)))
    (slot-set! ui 'detail-window window)
    (gtk-scrolled-window-set-policy window
                                    GTK_POLICY_AUTOMATIC
                                    GTK_POLICY_AUTOMATIC)
    (gtk-scrolled-window-add-with-viewport window
                                           (make-outer-detail-sub-panel ui))
    window))

(define (make-outer-detail-sub-panel ui)
  (let ((panel (gtk-hbox-new #f 0)))
    (gtk-box-pack-start panel (make-inner-detail-sub-panel ui) #f #f 0)
    panel))

(define (make-inner-detail-sub-panel ui)
  (let ((panel (gtk-hbox-new #f 0)))
    (gtk-box-pack-start panel (make-fault-detail-label ui) #f #f 0)
    panel))

(define (make-fault-detail-label ui)
  (let ((label (gtk-label-new "")))
    (slot-set! ui 'fault-detail-label label)
    (gtk-label-set-line-wrap label #f)
    label))

(define (make-status-panel ui)
  (let ((panel (gtk-hbox-new #f 0)))
    (gtk-box-pack-start panel (make-status-entry ui) #t #t 0)
    panel))

(define (make-status-entry ui)
  (let ((entry (gtk-entry-new)))
    (slot-set! ui 'status-entry entry)
    (gtk-entry-set-editable entry #f)
    entry))

(define (print-error-line stack)
  (and-let* ((code (car stack))
             ((pair? code))
             (info (pair-attribute-get code 'source-info #f))
             ((pair? info))
             ((pair? (cdr info))))
            (print (format "~a:~a: ~s" (car info) (cadr info) code))))
  
(define-method test-errored ((self <test-ui-gtk>) test err)
  (display-when self :progress "E\n")
  (print-error-line (cadddr (vm-get-stack-trace)))
  (print #`"Error occured in ,(name-of test)")
  (with-error-to-port (current-output-port)
                      (lambda ()
                        (report-error err))))

(define-method test-successed ((self <test-ui-gtk>) test)
  (let ((bar (progress-bar-of self)))
    (gtk-progress-set-value bar
                            (+ 1 (gtk-progress-get-value bar))))
  (display-when self :progress "."))

(define-method test-failed ((self <test-ui-gtk>) test message stack-trace)
  (display-when self :progress "F\n")
  (print-error-line (car stack-trace))
  (print message #`" in ,(name-of test)")
  (with-error-to-port (current-output-port)
                      (lambda ()
                        (with-module gauche.vm.debugger
                                     (debug-print-stack
                                      stack-trace
                                      *stack-show-depth*)))))

(define-method test-run ((self <test-ui-gtk>) test test-thunk)
  (test-thunk))

(define-method test-case-run ((self <test-ui-gtk>) test-case test-thunk)
  (display-when self :verbose #`"-- Start test case ,(name-of test-case)\n")
  (test-thunk)
  (display-when self :verbose #\newline)
  )

(define-method test-suite-run ((self <test-ui-gtk>) test-suite test-thunk)
  (let ((window (main-window-of self)))
    (gtk-window-set-title window (name-of test-suite))
    (gtk-widget-show-all window)
    (let ((gtk-thread (make-thread gtk-main)))
      (thread-start! gtk-thread)
      (let ((counter (make <real-time-counter>)))
        (display-when self :normal #`"- Start test suite ,(name-of test-suite)\n")
        (with-time-counter counter (test-thunk))
        (display-when self :normal "\n")
        (display-when
         self :normal
         (format "~s tests, ~s assertions, ~s successes, ~s failures, ~s errors"
                 (test-number-of test-suite)
                 (assertion-number-of test-suite)
                 (success-number-of test-suite)
                 (failure-number-of test-suite)
                 (error-number-of test-suite))
         print)
        (display-when
         self :normal
         (format "Testing time: ~s" (time-counter-value counter)))
        (display-when self :progress "\n"))
      (let ((bar (progress-bar-of self)))
        (gtk-progress-bar-set-fraction bar 1))
      (thread-join! gtk-thread))))

(set-default-test-ui! (make <test-ui-gtk>))

(provide "test/ui/gtk")
